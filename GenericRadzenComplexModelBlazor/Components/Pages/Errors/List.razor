@page "/errors"
@using Repository.Interface
@using Model

@inject NotificationService NotificationService
@inject DialogService DialogService
@inject IGenericRepository<Error> Repository

<RadzenDataGrid Data="@errors" TItem="Error" AllowFiltering="true"  AllowSorting="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
    <HeaderTemplate>
        <RadzenText TextStyle="TextStyle.DisplayH4">Errors</RadzenText>
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="Error" Property="ID" Title="ID"  Width="50px" />
        <RadzenDataGridColumn TItem="Error" Property="Message" Title="Message" Filterable="true" Width="500px" />
        <RadzenDataGridColumn TItem="Error" Property="DateTimeStamp" Title="Date Time" Filterable="true" Width="100px" />
        <RadzenDataGridColumn TItem="Error" Width="30px" TextAlign="TextAlign.End" Filterable="false" Sortable="false" Pickable="false">
            <Template Context="context">
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Secondary" Icon="delete" Size="ButtonSize.ExtraSmall" Click="@(() => Delete(context))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    public List<Error> errors = new List<Error>();

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    public async Task Refresh()
    {
        errors = await Repository.Get();
        StateHasChanged();
    }


    protected async Task Delete(Error del)
    {
        var confirmResult = await DialogService.Confirm("Da li ste sigurni?", "Obriši", new ConfirmOptions() { OkButtonText = "Da", CancelButtonText = "Ne" });

        if (confirmResult.HasValue && confirmResult.Value)
        {
            dynamic x = Repository.Delete(del);

            if (x != null && x is bool)
            {
                if (x)
                {
                    await Refresh();
                    NotificationService.Notify(NotificationSeverity.Success, "Uspešno", "Uspešno obrisan", 3000);
                }
                else
                {
                    NotificationService.Notify(NotificationSeverity.Error, "Greška", "Greška prilikom brisanja", 7000);
                }
            }
        }
    }

}